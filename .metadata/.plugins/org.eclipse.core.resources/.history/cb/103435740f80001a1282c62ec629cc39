package Program;
import javax.swing.*;

import java.awt.GridLayout;
//for excel
import java.io.File;  
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Iterator;  
import org.apache.poi.ss.usermodel.Cell;  
import org.apache.poi.ss.usermodel.Row;  
import org.apache.poi.xssf.usermodel.XSSFSheet;  
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
//


public class allReportFrame {
	public allReportFrame() {
		JFrame report = new JFrame("Full Report");
		double[][] creditPoints = {{4,3,3,4,3,2,2}, {3,4,4,3,3,2,2,2}, {4,3,3,3,3,2,2,4}, {3,3,4,3,3,2,2,2}};
        double[] numSubjectSem = {7,8,8,8};
        int rowCount = 0;
        
        try{
    		File file = new File("/home/deus-oc/project/data.xlsx");   //creating a new file instance  
			FileInputStream fis = new FileInputStream(file);   //obtaining bytes from the file  
			XSSFWorkbook wb = new XSSFWorkbook(fis);   
			XSSFSheet sheet = wb.getSheetAt(0);//creating a Sheet object to retrieve object  
			Iterator<Row> itr = sheet.iterator();    //iterating over excel file  
			ArrayList<String> studentDetails = new ArrayList<String>();
			while (itr.hasNext()){
				Row row = itr.next();
				Iterator<Cell> cellIterator = row.cellIterator();   //iterating over each column
				//till one row
				while (cellIterator.hasNext()){
					Cell cell = cellIterator.next();
					//just for value
    					switch (cell.getCellType()){  
    						case Cell.CELL_TYPE_STRING:    //field that represents string cell type  
    							studentDetails.add(cell.getStringCellValue());
    							break;    							
    						case Cell.CELL_TYPE_NUMERIC:    //field that represents number cell type
        						studentDetails.add(String.valueOf(cell.getNumericCellValue()));
        						break;
    						default:  
    							break;
    					}
				//till one row
				rowCount++;
			}
				String[][] rowColumn = new String[rowCount][7]; //4 semester not still included
				for(int i = 0; i < rowCount; i++) {
					rowColumn[i][0] = studentDetails.get(0);
	        		rowColumn[i][1] = studentDetails.get(1);
					int j = 0;
	        		double sumSGPA = 0;
	        		double totalcreditSGPA = 0;
	        		double totalcreditoneSGPA = 0;
	        		double sumtotalSGPA = 0;
	        		int kincrease = -1;
	        		for(int k = 2; k < studentDetails.size(); k++) {
	        			kincrease++;
	        			sumSGPA += Double.valueOf(studentDetails.get(k))*creditPoints[j][kincrease];
	        			totalcreditoneSGPA += creditPoints[j][kincrease]; 
	        			if(kincrease + 1 == numSubjectSem[j]) {
	        				kincrease = -1;
	        				sumtotalSGPA += sumSGPA;
	        				rowColumn[0][j+2] = String.valueOf(sumSGPA/totalcreditoneSGPA);
	        				j++;
	        				totalcreditSGPA += totalcreditoneSGPA;
	        				totalcreditoneSGPA = 0;
	        				sumSGPA = 0;
	        			}
	        		}
	        		double CGPA = sumtotalSGPA/totalcreditSGPA;
	        		rowColumn[0][j+2] = String.valueOf(CGPA);
	        		for(int q = 0; q < 7; q++) {
	        			System.out.println(rowColumn[0][q]);
	        		}
				}
        	}
            	  madeHiddenPanel++;
              	  second2ndPanel = new JPanel();
                  second2ndPanel.setLayout(new GridLayout(2,1));
                  
                  hiddenTablePanel = new JPanel();
                  hiddenTable = new JTable(rowColumn, detailName);
                  hiddenTable.setBounds(100,100,80,80);
                  hiddenTablePanel.add(new JScrollPane(hiddenTable));
                  second2ndPanel.add(hiddenTablePanel);
                  
                  hiddenButtonPanel = new JPanel();
                  individualSubmit = new JButton("Check Now!");
                  regSubmit.setBounds(50,200,50,50);
                  hiddenButtonPanel.add(individualSubmit);
                  second2ndPanel.add(hiddenButtonPanel); 
                  
                  secondPanel.add(second2ndPanel);
                  secondPanel.revalidate();
                  secondPanel.repaint();
    	}  
		catch(Exception eA){  
			eA.printStackTrace();  
		}
	
		report.setSize(500,500);
		report.setVisible(true);
	}
	
}